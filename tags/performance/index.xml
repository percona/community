<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>performance on Percona Community</title><link>https://percona.community/tags/performance/</link><description>Recent content in performance on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://percona.community/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>The Road Towards an Open Database Performance Ranking</title><link>https://percona.community/events/percona-community-live-2022/day-3-daniel-seybold/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>https://percona.community/events/percona-community-live-2022/day-3-daniel-seybold/</guid><description> This session was presented on Percona Community Live Online June 21-23, 2022. Check out the full schedule here.
Watch Video Here Transcript</description></item><item><title>Reduce Replication Lag</title><link>https://percona.community/blog/2022/06/01/speed-up-replication-lag/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://percona.community/blog/2022/06/01/speed-up-replication-lag/</guid><description>Replication Lag is just a fact of life with async-replication. We can&amp;rsquo;t stop lag, but we can help to reduce it. Many times the Seconds_Behind_Source can be very deciving, I have seen it go from 1 hour behind to 0 lag in the blink of an eye. There are many factors that can add to replica lag. Some of these are:
Network IO Disk IO Database Workload Database settings In this blog we will look a few database settings to help reduce lag.</description></item><item><title>Unexpected slow ALTER TABLE in MySQL 5.7</title><link>https://percona.community/blog/2020/04/23/unexpected-slow-alter-table-mysql-5-7/</link><pubDate>Thu, 23 Apr 2020 15:47:21 +0000</pubDate><guid>https://percona.community/blog/2020/04/23/unexpected-slow-alter-table-mysql-5-7/</guid><description>Usually one would expect that ALTER TABLE with ALGORITHM=COPY will be slower than the default ALGORITHM=INPLACE. In this blog post we describe the case when this is not so.
One of the reasons for such behavior is the lesser known limitation of ALTER TABLE (with default ALGORITHM=INPLACE) that avoids REDO operations. As a result, all dirty pages of the altered table/tablespace have to be flushed before the ALTER TABLE completion.</description></item><item><title>Finding MySQL Scaling Problems Using perf</title><link>https://percona.community/blog/2020/02/05/finding-mysql-scaling-problems-using-perf/</link><pubDate>Wed, 05 Feb 2020 16:18:14 +0000</pubDate><guid>https://percona.community/blog/2020/02/05/finding-mysql-scaling-problems-using-perf/</guid><description>The thing I wish I&amp;rsquo;d learned while still a DBA is how to use perf. Conversely after moving to a developer role, getting access to real external client workloads to get a perf recording directly is rare. To bridge this gap, I hope to encourage a bit of perf usage to help DBAs report bugs/feature requests in more detail to MySQL developers, who can then serve your needs better.
A recent client request showed how useful perf is in exposing the areas of MySQL that are otherwise well tuned, but can still be in need of coding improvements that increase throughput.</description></item><item><title>MySQL 5.6/Maria 10.1 : How we got from 30k qps to 101k qps.....</title><link>https://percona.community/blog/2019/08/07/mysql-how-we-got-from-30k-qps-to-101k-qps/</link><pubDate>Wed, 07 Aug 2019 07:52:45 +0000</pubDate><guid>https://percona.community/blog/2019/08/07/mysql-how-we-got-from-30k-qps-to-101k-qps/</guid><description>Late one evening, I was staring at one of our large MySQL installations and noticed the database was hovering around 7-10 run queue length (48 cores, ~500 gigs memory, fusionIO cards). I had been scratching my head on how to get more throughput from the database. This blog records the changes I made to tune performance in order to achieve a 300% better throughput in MySQL. I tested my theories on MySQL 5.</description></item><item><title>MySQL Optimizer: Naughty Aberrations on Queries Combining WHERE, ORDER BY and LIMIT</title><link>https://percona.community/blog/2019/07/29/mysql-optimizer-naughty-aberrations-on-queries-combining-where-order-by-and-limit/</link><pubDate>Mon, 29 Jul 2019 11:50:51 +0000</pubDate><guid>https://percona.community/blog/2019/07/29/mysql-optimizer-naughty-aberrations-on-queries-combining-where-order-by-and-limit/</guid><description>Sometimes, the MySQL Optimizer chooses a wrong plan, and a query that should execute in less than 0.1 second ends-up running for 12 minutes!This is not a new problem: bugs about this can be traced back to 2014, and a blog post on this subject was published in 2015.But even if this is old news, because this problem recently came yet again to my attention, and because this is still not fixed in MySQL 5.</description></item></channel></rss>