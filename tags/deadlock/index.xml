<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deadlock on Percona Community</title><link>https://percona.community/tags/deadlock/</link><description>Recent content in Deadlock on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Mon, 24 Sep 2018 10:49:35 +0000</lastBuildDate><atom:link href="https://percona.community/tags/deadlock/index.xml" rel="self" type="application/rss+xml"/><item><title>Minimize MySQL Deadlocks with 3 Steps</title><link>https://percona.community/blog/2018/09/24/minimize-mysql-deadlocks-3-steps/</link><pubDate>Mon, 24 Sep 2018 10:49:35 +0000</pubDate><guid>https://percona.community/blog/2018/09/24/minimize-mysql-deadlocks-3-steps/</guid><description>MySQL has locking capabilities, for example table and row level locking, and such locks are needed to control data integrity in multi-user concurrency. Deadlocks—where two or more transactions are waiting for one another to give up locks before the transactions can proceed successfully—are an unwanted situation. It is a classic problem for all databases including MySQL/PostgreSQL/Oracle etc. By default, MySQL detects the deadlock condition and to break the deadlock it rolls back one of the transactions.</description></item></channel></rss>