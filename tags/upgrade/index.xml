<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Upgrade on Percona Community</title><link>https://percona.community/tags/upgrade/</link><description>Recent content in Upgrade on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Fri, 26 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://percona.community/tags/upgrade/index.xml" rel="self" type="application/rss+xml"/><item><title>Unexpected Stalled Upgrade to MySQL 8.0</title><link>https://percona.community/blog/2024/01/26/unexpected-stalled-upgrade-to-mysql-8-0/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><guid>https://percona.community/blog/2024/01/26/unexpected-stalled-upgrade-to-mysql-8-0/</guid><description>A multi-tenant database is a database that serves multiple clients, or tenants, who share the same database schema but have separate data sets. One way to achieve data isolation for each client is to create a separate MySQL database for each tenant.
Some advantages of this approach are:
It allows for easy backup and restore of individual tenant data. It simplifies the database administration and maintenance tasks, as each database can be managed independently.</description></item><item><title>7 Checks to Successfully Upgrade MongoDB Replica Set in Production</title><link>https://percona.community/blog/2018/08/29/7-checks-successfully-upgrade-mongodb-replica-set-production/</link><pubDate>Wed, 29 Aug 2018 10:23:20 +0000</pubDate><guid>https://percona.community/blog/2018/08/29/7-checks-successfully-upgrade-mongodb-replica-set-production/</guid><description>MongoDB ships powerful features in each release. The new release brings new features while revisions add bug fixes, security patches or improvements to existing features. To bring most out these releases to your plate you should always consider upgrading your MongoDB deployments.
Planning your database upgrade can avoid the nightmares caused due to database-upgrade-gone-wrong or avoid not-so-simple rollbacks in your production database. Grab a cup of coffee and sit back. This blog post explains the few important to have items on your checklist to plan MongoDB replica set upgrades.</description></item><item><title>How to Automate Minor Version Upgrades for MySQL on RDS</title><link>https://percona.community/blog/2018/07/10/automate-minor-version-upgrades-mysql-rds/</link><pubDate>Tue, 10 Jul 2018 12:19:11 +0000</pubDate><guid>https://percona.community/blog/2018/07/10/automate-minor-version-upgrades-mysql-rds/</guid><description>Amazon RDS for MySQL offers the option to automate minor version upgrades using the minor version upgrade policy, a property that lets you decide if Amazon is allowed to perform the upgrades on your behalf. Usually the goal is not to upgrade automatically every RDS instance but to keep up to date automatically non-production deployments. This helps you address engine issues as soon as possible and improve the automation of the deployment process.</description></item></channel></rss>