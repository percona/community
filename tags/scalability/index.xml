<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scalability on Percona Community</title><link>https://percona.community/tags/scalability/</link><description>Recent content in Scalability on Percona Community</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Percona Community. MySQL, InnoDB, MariaDB and MongoDB are trademarks of their respective owners.</copyright><lastBuildDate>Thu, 11 Oct 2018 17:03:04 +0000</lastBuildDate><atom:link href="https://percona.community/tags/scalability/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying MySQL on Kubernetes with a Percona-based Operator</title><link>https://percona.community/blog/2018/10/11/deploying-mysql-on-kubernetes-with-a-percona-based-operator/</link><pubDate>Thu, 11 Oct 2018 17:03:04 +0000</pubDate><guid>https://percona.community/blog/2018/10/11/deploying-mysql-on-kubernetes-with-a-percona-based-operator/</guid><description>In the context of providing managed WordPress hosting services, at Presslabs we operate with lots of small to medium-sized databases, in a DB-per-service model, as we call it. The workloads are mostly reads, so we need to efficiently scale that. The MySQL® asynchronous replication model fits the bill very well, allowing us to scale horizontally from one server—with the obvious availability pitfalls—to tens of nodes. The next release of the stack is going to be open-sourced.</description></item></channel></rss>